*********************************************************************************
*
* Table of Addresses of Graphic Layout Data Handling Routines
*
* Graphic layout data is stored in the form of encoded instructions. Generally an instruction is simply to display a
* graphic of given index with a given attribute and then to advance the position of the drawing "cursor". If the
* first byte (normally the graphic index) is 236 or greater, however, then we are dealing with a special
* instruction; the values 236 and above can be considered to be opcodes. These opcodes correspond to calls/jumps to
* routines at addresses stored in this table. The opcodes all take different combinations of parameters.
*
graphic_routines_jmp_tbl:
       data graphics_routine_236                                                   ; (236)
       data graphics_routine_237                                                   ; (237)
       data graphics_routine_238                                                   ; (238)
       data graphics_routine_239                                                   ; (239)
       data graphics_routine_240                                                   ; (240)
       data graphics_routine_241                                                   ; (241)
       data graphics_routine_242                                                   ; (242)
       data graphics_routine_243                                                   ; (243)
       data graphics_routine_244                                                   ; (244)
       data graphics_routine_245                                                   ; (245)
       data graphics_routine_246                                                   ; (246)
       data graphics_routine_247                                                   ; (247)
       data graphics_routine_248                                                   ; (248)
       data graphics_routine_249                                                   ; (249)
       data graphics_routine_250                                                   ; (250)
       data graphics_routine_251                                                   ; (251)
       data graphics_routine_252                                                   ; (252)
       data graphics_routine_253                                                   ; (253)
       data graphics_routine_254                                                   ; (254)
       data graphics_routine_255                                                   ; (255)

*********************************************************************************
* Graphic Layout Routine (237) Set New Pending Sound Input:  IX  Address of first parameter in current graphic
* layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_237:
       movb *ix,a                      ; LD A,(IX+0)       ; Load current byte of graphic layout data into A
       bl   @request_sound             ; CALL 59613        ; Set pending sound index to A if it is currently zero, or lower priority
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @inc_execute_gfx_script    ; JP 46001          ; Advance graphic layout data pointer by one byte and read / process next data

*********************************************************************************
* Graphic Layout Routine (242) Set Current Attribute Input:  IX  Address of first parameter in current graphic
* layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_242:
       movb *ix,a                      ; LD A,(IX+0)       ; Load current byte of graphic layout data...
       movb a,@current_attr            ; LD (34270),A      ; ...and set as current Attribute
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @inc_execute_gfx_script    ; JP 46001          ; Advance graphic layout data pointer by one byte and read / process next data

*********************************************************************************
* Graphic Layout Routine (244) Set Current Graphic Set Index Input:  IX  Address of first parameter in current
* graphic layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_244:
       movb *ix,a                      ; LD A,(IX+0)       ; Load current byte of graphic layout data...
       movb a,@graphic_set_index       ; LD (34268),A      ; ...and set as current Graphic Set Index
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @inc_execute_gfx_script    ; JP 46001          ; Advance graphic layout data pointer by one byte and read / process next data

*********************************************************************************
* Graphic Layout Routine (236) Set Graphic Index in Next Instruction to Value Randomly Selected from List
*
* Read Current Byte (n, random number cap), generate random number m (1 to n inclusive) and copy the m-th byte in
* following list into position after end of list bytes (i.e. the graphic index field of the next graphic layout data
* entry), then advance current position to this location. Input:  IX  Address of first parameter in current graphic
* layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0) IX  Address of next graphic
* layout data instruction to process
graphics_routine_236:
       .push ix                        ; PUSH IX           ; Store current position in graphic layout data
       movb *ix,a                      ; LD A,(IX+0)       ; Load current byte (Random Number Cap) from graphic layout data into A...
       movb a,@e                       ; LD E,A            ; ...and copy into E
       bl   @rnd_no                    ; CALL 54222        ; Load BC with a random number, 1-A...
       ab   one,a                      ; INC A             ; ...
       movb a,@c                       ; LD C,A            ; ...
       sb   b,b                        ; LD B,0            ; ...
       a    bc,ix                      ; ADD IX,BC         ; Advance IX by number of bytes stored in BC
       movb *ix,a                      ; LD A,(IX+0)       ; Load byte at this location into A
       .pop ix                         ; POP IX            ; Restore previous position in graphic layout data
       movb @e,@c                      ; LD C,E            ; Load Random Number Cap into BC...
       ab   one,@c                     ; INC C             ; ...and add one
       a    bc,ix                      ; ADD IX,BC         ; Advance IX by this number of bytes
       movb a,*ix                      ; LD (IX+0),A       ; Store byte previously read at current position
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (245) Decrease Timer Value, and if Zero, Reset and Write Random Graphic Index from List
* into Next Instruction
*
* Decrease timer value (1st parameter). If now zero, then reset timer to value in 2nd parameter, then load one of
* the n (3rd parameter) following values chosen at random into the Graphic Index field of the next instruction.
* Input:  IX  Address of first parameter in current graphic layout data instruction Output: B  Do Not Recalculate
* Display Buffer Address Flag (0) IX  Address of next graphic layout data instruction to process
graphics_routine_245:
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       sb   one,*ix                    ; DEC (IX+0)        ; Decrease timer value
       jne  graphics_routine_246_1     ; JR NZ,46370       ; If timer is not zero, then advance IX to start of next instruction and process
       bl  @reset_timer                ; CALL 46385        ; Reset timer to maximum, advance IX to start of next instruction and set value here (graphic
                                                           ; index) to random value from sequence of data following previous instruction...
       movb @e,*ix                     ; LD (IX+0),E       ; ...
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (246) Decrease Timer Value, and if Zero, Reset and Write Random Attribute from List into
* Next Instruction
*
* Decrease timer value (1st parameter). If now zero, then reset timer to value in 2nd parameter, then load one of
* the n (3rd parameter) following values chosen at random into the Attribute field of the next instruction. Input:
* IX  Address of first parameter in current graphic layout data instruction Output: B  Do Not Recalculate Display
* Buffer Address Flag (0) IX  Address of next graphic layout data instruction to process
graphics_routine_246:
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       sb   one,*ix                    ; DEC (IX+0)        ; Decrease timer value
       jeq  graphics_routine_246_2     ; JR Z,46376        ; If timer is zero, then reset timer, advance to next instruction and set that instruction's
                                                           ; attribute to random value from sequence
* This entry point is used by the routine at #R46347.
graphics_routine_246_1:
       bl   @reset_timer_1             ; CALL 46409        ; Advance to next instruction and process...
       b    @execute_gfx_script        ; JP 46003          ; ...
graphics_routine_246_2:
       bl   @reset_timer               ; CALL 46385        ; Reset timer to maximum, advance IX to start of next instruction and set second value here
                                                           ; (attribute) to random value from sequence of data following previous instruction...
       movb @e,@1(ix)                  ; LD (IX+1),E       ; ...
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (250) Adjust x- and y-Coordinates for Drawing Without Storing
*
* Read following two bytes in graphic layout data and adjust y- and x-coordinates by these amounts respectively,
* without storing. These new coordinates will be lost on the next draw operation, being overwritten by the values
* stored at #R34281. Input:  IX  Address of first parameter in current graphic layout data instruction Output: B  Do
* Not Recalculate Display Buffer Address Flag (0)
graphics_routine_250:
       ab *ix+,@l                      ; LD A,(IX+0)       ; Read delta-y into A...
                                       ; ADD A,L           ; ...and adjust y-coordinate by this amount...
                                       ; LD L,A            ; ...
       ab   *ix+,h                     ; LD A,(IX+1)       ; Read delta-x into A...
                                       ; ADD A,H           ; ...and adjust x-coordinate by this amount...
                                       ; LD H,A            ; ...
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 45999          ; Advance graphic layout data pointer by two bytes and read / process next data

*********************************************************************************
* Graphic Layout Routine (254) Adjust x- and y-Coordinates for Drawing and Set as New Base Coordinates
*
* Read following two bytes in graphic layout data and adjust y- and x-coordinates by these amounts respectively,
* storing at #R34281 as base coordinates. These new coordinates will be used as the starting position on the next
* draw operation. Input:  H  Current x-coordinate L  Current y-coordinate IX  Address of first parameter in current
* graphic layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_254:
       ab   *ix+,@l                    ; LD A,(IX+0)       ; Read delta-y into A...
                                       ; ADD A,L           ; ...and adjust y-coordinate by this amount...
                                       ; LD L,A            ; ...
       ab   *ix+,h                     ; LD A,(IX+1)       ; Read delta-x into A...
                                       ; ADD A,H           ; ...and adjust x-coordinate by this amount...
                                       ; LD H,A            ; ...
       swpb hl                         ; Big endian
       mov  hl,@draw_coordinates       ; LD (34281),HL     ; Store new coordinates at #R34281
       swpb  hl                        ; Little endian
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 45999          ; Advance graphic layout data pointer by two bytes and read / process next data

*********************************************************************************
* Graphic Layout Routine (251) Process Graphic Layout Data at Following Address and Return When Complete
*
* Functionally equivalent to "CALL" instruction. Read current WORD (address) from graphic layout data, load graphic
* layout data at that address into Primary Display Buffer and return to previous position. Upon returning (via
* routine at #R46418 when a 255 is encountered), the position of the cursor (i.e. the value in HL) is reset to the
* base coordinates as stored at #R34281 - see instruction at #R46422. Input:  IX  Address of first parameter in
* current graphic layout data instruction Output: B  Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_251:
       movb *ix+,@c                    ; LD C,(IX+0)       ; Load BC with destination graphic layout data address...
       movb *ix+,b                     ; LD B,(IX+1)       ; ...
       .push ix                        ; PUSH IX           ; Store IX (current position in graphic layout data)
       mov  bc,ix                      ; PUSH BC           ; Transfer address just read into BC into IX...
                                       ; POP IX            ; ...
       bl   @process_data_in_ix_call   ; CALL 46003        ; Load graphic layout data from this new location into Primary Display Buffer (recursive call)
       .pop ix                         ; POP IX            ; Restore IX (previously stored position in graphic layout data)
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 45999          ; Advance graphic layout data pointer by two bytes and read / process next data

*********************************************************************************
* Graphic Layout Routine (248) Jump to Graphic Layout Data Address
*
* Read current WORD (address) from graphic layout data and move graphic layout data Pointer to this address. Input:
* IX  Address of first parameter in current graphic layout data instruction Output: B  Do Not Recalculate Display
* Buffer Address Flag (0) IX  Address of next graphic layout data instruction to process
graphics_routine_248:
       movb *ix+,@c                    ; LD C,(IX+0)       ; Load next two bytes as a WORD into IX...
       movb *ix,b                      ; LD B,(IX+1)       ; ...
       mov  bc,ix                      ; PUSH BC           ; ...
                                       ; POP IX            ; ...
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (249) Jump to Time-Weighted, Randomly Selected Graphic Layout Data Address in List Input:
* IX  Address of first parameter in current graphic layout data instruction Output: B  Do Not Recalculate Display
* Buffer Address Flag (0) IX  Address of next graphic layout data instruction to process
graphics_routine_249:
       .push ix                        ; PUSH IX           ; Store IX (pointer to first parameter in graphic layout data)
       movb @1(ix),a                   ; LD A,(IX+1)       ; Load A with current state number
       sla  a,2                        ; ADD A,A           ; Multiply A by four and add two...
                                       ; ADD A,A           ; ...to give number of bytes of data to skip over...
       ab   @bytes+2,a                 ; ADD A,2           ; ...
       movb a,@c                       ; LD C,A            ; Load BC with value in A...
       sb   b,b                        ; LD B,0            ; ...
       a    bc,ix                      ; ADD IX,BC         ; ...and add to IX to advance to start of data for current state
       sb   one,*ix                    ; DEC (IX+0)        ; Decrease the timer value for this state...
       jne  graphics_routine_249_1     ; JR NZ,46544       ; ...and if not zero, skip ahead to #R46544
       .pop ix                         ; POP IX            ; Restore (pointer to first parameter in graphic layout data)
       movb *ix,a                      ; LD A,(IX+0)       ; Load A with random number...
       bl   @rnd_no                    ; CALL 54222        ; ...from zero to one less than number of states...
       movb a,@1(ix)                   ; LD (IX+1),A       ; ...and set this as the index of the current state
       sla  a,2                        ; ADD A,A           ; Multiply A by four and add two...
                                       ; ADD A,A           ; ...to give number of bytes of data to skip over...
       ab   @bytes+2,a                 ; ADD A,2           ; ...
       movb a,@c                       ; LD C,A            ; Load BC with value in A
       a    bc,ix                      ; ADD IX,BC         ; Advance IX to start of data for (new) current state
       movb @1(ix),a                   ; LD A,(IX+1)       ; Load A with random number...
       bl   @rnd_no                    ; CALL 54222        ; ...from one to maximum timer value for state...
       ab   one,a                      ; INC A             ; ...
       movb a,*ix                      ; LD (IX+0),A       ; ...and set as current timer value for this state
       jmp  graphics_routine_249_2     ; JR 46545          ; Skip ahead to #R46545
graphics_routine_249_1:
       .pop bc                         ; POP BC            ; Restore BC (graphic layout data position, was previously in IX)
graphics_routine_249_2:
       movb @2(ix),@c                  ; LD C,(IX+2)       ; Load IX with graphic layout data address...
       movb @3(ix),b                   ; LD B,(IX+3)       ; ...in current state's data...
       mov  bc,ix                      ; PUSH BC           ; ...
                                       ; POP IX            ; ...
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script                    ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (243) Increment Index, n, and Jump to n-th Address in Following List
*
* Read first parameter (n) from graphic layout data, increment (resetting to zero if it is equal to the length of
* the list of addresses as specified by the second parameter) and jump to n-th address. Input:  IX  Address of first
* parameter in current graphic layout data instruction Output: A  Number of bytes in graphic layout data to skip
* over
graphics_routine_243:
       movb *ix,a                      ; LD A,(IX+0)       ; Load current byte of graphic layout data into A
       ab   one,a                      ; INC A             ; Increase by one
       cb   a,@1(ix)                   ; CP (IX+1)         ; If following byte (cap value) is greater than current byte...
       jl   graphics_routine_243_1     ; JR C,46569        ; ...then skip ahead to #R46569
       sb   a,a                        ; XOR A             ; Reset current value to zero as cap value reached
graphics_routine_243_1:
       movb a,*ix                      ; LD (IX+0),A       ; Load current value back into current position in graphic layout data
       ab   a,a                        ; ADD A,A           ; Load double current value + 2 (as we're skipping over first two bytes and subsequent data are
                                                           ; WORD addresses) into A...
       ab   @bytes+2,a                 ; ADD A,2           ; ...
       jmp  graphics_routine_247_2     ; JR 46586          ; Jump to #R46586

*********************************************************************************
* Graphic Layout Routine (247) Jump to Randomly Selected Graphic Layout Data Address from List
*
* Read current byte value (n) from graphic layout data, generate random number m (0 - n-1) then jump to address in
* m-th WORD after current position. Input:  A  (Entry at #R46585) Number of words in graphic layout data to skip
* over A  (Entry at #R46586) Number of bytes in graphic layout data to skip over IX  Address of first parameter in
* current graphic layout data instruction Output: IX  Address of next graphic layout data instruction to process
graphics_routine_247:
       movb *ix+,a                     ; LD A,(IX+0)       ; Load current byte of graphic layout data into A
                                       ; INC IX            ; Advance pointer to next byte
       bl   @rnd_no                    ; CALL 54222        ; Load A with a random number between 0 and (A-1)
* This entry point is used by the routine at #R46594.
graphics_routine_247_1:
       ab   a,a                        ; ADD A,A           ; Double the number
* This entry point is used by the routine at #R46559.
graphics_routine_247_2:
       movb a,@c                       ; LD C,A            ; Load BC with offset value in A...
       sb   b,b                        ; LD B,0            ; ...
       a    bc,ix                      ; ADD IX,BC         ; Advance IX by offset value
       jmp  graphics_routine_248       ; JP 46481          ; Jump to #R46481 (set current position in graphic layout data to value of WORD at this
                                                           ; address)

*********************************************************************************
* Graphic Layout Routine (253) Jump to Graphic Layout Data Address Selected from List, Based Upon Width of Berk's
* Carried Entity Output: A  Number of words in graphic layout data to skip over
graphics_routine_253:
       movb @carried_entity_width,a    ; LD A,(34272)      ; Load A with width of entity (characters) carried by Berk, minus 1
       jmp  graphics_routine_247_1     ; JR 46585          ; Set current position in graphic layout data to value of A-th word in list

*********************************************************************************
* Unused routine
*
* Graphic layout routine (252): if Berk is holding nothing then jump to address. Input:IX Address of first parameter
* in current graphic layout data instruction Output:B Do Not Recalculate Display Buffer Address Flag (0)
graphics_routine_252:
       movb @berk_entity_held,a        ; LD A,(34221)      ; If Berk is not holding anything...
                                       ; OR A              ; ...
       jeq  graphics_routine_248       ; JP Z,46481        ; ...then jump to #R46481 (set current position in graphic layout data to value of WORD at this
                                       ;                   ; address)
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @inct_execute_gfx_script   ; JP 45999          ; Advance graphic layout data pointer by two bytes and read / process next data

*********************************************************************************
* Graphic Layout Routine (238) Start Loop (1 / 2)
*
* Start a loop in graphic layout data. The parameter is the repeat count. The current value of the repeat counter is
* stored at #R34274 and the address of the next instruction (i.e. the first instruction that is processed in each
* loop) is stored at #R34294. Input:  IX  Address of first parameter in current graphic layout data instruction
* Output: B  Do Not Recalculate Display Buffer Address Flag (0) IX  Address of next graphic layout data instruction
* to process
graphics_routine_238:
       movb *ix+,@loop_counter_value_1 ; LD A,(IX+0)       ; Load current byte of graphic layout data...
                                       ; LD (34274),A      ; ...into #R34274 (repeat counter)
                                       ; INC IX            ; Advance IX to next position in graphic layout data...
       mov  ix,@loop_address           ; LD (34294),IX     ; ...and store at #R34294
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (239) End Loop (1 / 2) Output: B  Do Not Recalculate Display Buffer Address Flag (0) IX
* Address of next graphic layout data instruction to process
graphics_routine_239:
       sb   one,@loop_counter_value_1  ; LD A,(34274)      ; Decrement repeat counter...
                                       ; DEC A             ; ...
                                       ; LD (34274),A      ; ...
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       movb @loop_counter_value_1,a
       jeq  !                          ; JP Z,46003        ; If repeat counter is zero, then exit loop and process subsequent bytes...
       mov  @loop_address,ix           ; LD IX,(34294)     ; ...else, restore stored position in graphic layout data (start of loop)...
!      b    @execute_gfx_script        ; JP 46003          ; ...and continue processing data from this point

*********************************************************************************
* Graphic Layout Routine (240) Start Loop (2 / 2)
*
* Start a loop in graphic layout data. The parameter is the repeat count. The current value of the repeat counter is
* stored at #R34275 and the address of the next instruction (i.e. the first instruction that is processed in each
* loop) is stored at #R34296. Input:  IX  Address of first parameter in current graphic layout data instruction
* Output: B  Do Not Recalculate Display Buffer Address Flag (0) IX  Address of next graphic layout data instruction
* to process
graphics_routine_240:
       movb *ix+,@loop_counter_value_2 ; LD A,(IX+0)       ; Load current byte of graphic layout data...
                                       ; LD (34275),A       ; ...into #R34275 (repeat counter)
                                       ; INC IX            ; Advance IX to next position in graphic layout data...
       mov  ix,@loop_start             ; LD (34296),IX     ; ...and store at #R34296
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       b    @execute_gfx_script        ; JP 46003          ; Read / process data at address in IX

*********************************************************************************
* Graphic Layout Routine (241) End Loop (2 / 2) Output: B  Do Not Recalculate Display Buffer Address Flag (0) IX
* Address of next graphic layout data instruction to process
graphics_routine_241:
       sb   one,@loop_counter_value_2  ; LD A,(34275)      ; Decrement repeat counter...
                                       ; DEC A             ; ...
                                       ; LD (34275),A      ; ...
       sb   b,b                        ; LD B,0            ; Prepare to recalculate Display Buffer address
       movb @loop_counter_value_2,a
       jeq  !                          ; JP Z,46003        ; If repeat counter is zero, then exit loop and process subsequent bytes...
       mov  @loop_start,ix             ; LD IX,(34296)     ; ...else, restore stored position in graphic layout data (start of loop)...
!      b    @execute_gfx_script        ; JP 46003          ; ...and continue processing data from this point

*********************************************************************************
* Graphic Layout Routine (255) Load HL with Stored Coordinates from 34281 and Return from Drawing
*
* Note that when returning from another block of graphic layout data, the Current Attribute stored at #R34270 (and
* set in the called block) is not preserved. Upon returning, the Current Attribute value is cleared. Output: B  Do
* Not Recalculate Display Buffer Address Flag (0) H  Current x-coordinate L  Current y-coordinate
graphics_routine_255:
       sb   a,a                        ; XOR A             ; Set Current Attribute to zero...
       movb a,@current_attr            ; LD (34270),A      ; ...
       mov  @draw_coordinates,hl       ; LD HL,(34281)     ; Load HL with base x- and y-coordinates
       swpb hl                         ; Little endian
       movb a,b                        ; LD B,A            ; Set B to zero
       .ret                            ; RET               ; Return

*********************************************************************************
* Reset Timer to Initial Value then Load E with Random Value from Sequence (in Graphic Layout Data)
*
* Used by the routines at #R46347 and #R46363. Input:  B  Always zero IX  Current address in graphic layout data
reset_timer:
       .proc
       movb @1(ix),*ix                 ; LD A,(IX+1)       ; Set current timer value to maximum...
                                       ; LD (IX+0),A       ; ...
       movb @2(ix),a                   ; LD A,(IX+2)       ; Load A with number of states
       bl   @rnd_no                    ; CALL 54222        ; Set C to a random number between 3 and (number of states + 2)...
       ab   @bytes+3,a                 ; ADD A,3           ; ...
       movb a,@c                       ; LD C,A            ; ...
       .push ix                        ; PUSH IX           ; Store IX (current position in graphic layout data)
       a    bc,ix                      ; ADD IX,BC         ; Advance IX by C bytes (BC = C, as B = 0)
       movb *ix,@e                     ; LD E,(IX+0)       ; Load E with value at this position
       .pop ix                         ; POP IX            ; Restore IX (old position in graphic layout data)
       jmp  !
* This entry point is used by the routine at #R46363.
reset_timer_1:
       .proc
!      movb @2(ix),a                   ; LD A,(IX+2)       ; Advance IX by number of states + 3 bytes to arrive at start of next data...
       ab   @bytes+3,a                 ; ADD A,3           ; ...
       movb a,@c                       ; LD C,A            ; ...
       a    bc,ix                      ; ADD IX,BC         ; ...
       .endproc                        ; RET               ; Return

